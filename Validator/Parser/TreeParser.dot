// Visualizes the state changes for the ParserState of TreeParser.lean.

digraph {
    rankdir = "LR"
    nodesep=0.6;

    // ParserState.opened ((ParseTree.mk v [])::nexts) > ParserState.value v nexts
    opened_value [label = "ParserState.opened ((ParseTree.mk v [])::nexts)" color="blue"]
    opened_value -> value [color="blue"]

    // ParserState.value _ ((ParseTree.mk f [ParseTree.mk v []])::nexts) > ParserState.pair f v nexts
    value_pair [label = "ParserState.value _ ((ParseTree.mk f [ParseTree.mk v []])::nexts)" color="orange"]
    pair [label = "ParserState.pair f v nexts" color="purple"]
    value_pair -> pair [color="orange"]

    // ParserState.opened ((ParseTree.mk f [ParseTree.mk v []])::nexts) > ParserState.pair f v nexts
    opened_pair [label = "ParserState.opened ((ParseTree.mk f [ParseTree.mk v []])::nexts)" color="blue"]
    opened_pair -> pair [color="blue"]

    // ParserState.pair _ v nexts > ParserState.value v nexts
    pair -> value [color="purple"]

    // ParserState.field _ children > ParserState.opened children
    field [label = "ParserState.field f forest" color="green"]
    field -> opened [color="green"]

    // x + ParserState.value _ [] > x
    value_empty [label = "ParserState.value _ []" color="orange"]
    zero [label = "0" rank="min"]
    value_empty -> zero [label = "pop" color="orange"]

    // x + ParserState.opened [] > x
    opened_empty [label = "ParserState.opened []" color="blue"]
    opened_empty -> zero [label = "pop" color="blue"]

    // children ≠ []
    // children ≠ [ParseTree.mk v []]
    // ParserState.opened ((ParseTree.mk f children)::nexts) > ParserState.opened nexts + ParserState.field f children
    opened_other [label = "ParserState.opened ((ParseTree.mk f children)::nexts)" color="blue"]
    opened_other -> opened [arrowhead = "odiamond" label="push" style="bold" color="blue"]
    opened_other -> field [arrowhead = "odiamond" label="push" style="bold" color="blue"]
    // ParserState.value _ ((ParseTree.mk f children)::nexts) > ParserState.opened nexts + ParserState.field f children
    value_other [label = "ParserState.value _ ((ParseTree.mk f children)::nexts)" color="orange"]
    value_other -> opened [arrowhead = "odiamond" label="push" style="bold" color="orange"]
    value_other -> field [arrowhead = "odiamond" label="push" style="bold" color="orange"]

    // value -> value_empty [ arrowhead = none ]
    // value -> value_value [ arrowhead = none ]
    // value -> value_pair [ arrowhead = none ]
    // value -> value_other [ arrowhead = none ]

    subgraph cluster_value {
        color="orange"
        value
        value_empty
        value_value
        value_pair
        value_other
    }

    // opened -> opened_empty [ arrowhead = none ]
    // opened -> opened_value [ arrowhead = none ]
    // opened -> opened_pair [ arrowhead = none ]
    // opened -> opened_other [ arrowhead = none ]

    subgraph cluster_opened {
        color="blue"
        opened
        opened_empty
        opened_value
        opened_pair
        opened_other
    }

    // ParserState.unknown forest > ParserState.opened forest
    unknown [label = "ParserState.unknown forest" rank="max" color="red"]
    opened [label = "ParserState.opened forest" color="blue"]
    unknown -> opened [color="red"]

    // ParserState.value _ ((ParseTree.mk v [])::nexts) > ParserState.value v nexts
    value_value [label = "ParserState.value _ ((ParseTree.mk v [])::nexts)" color="orange"]
    value [label = "ParserState.value v nexts" color="orange"]
    value_value -> value [color="orange"]
}